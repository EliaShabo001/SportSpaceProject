  return (
    <Box
      sx={{ pt: 8, pb: 6, bgcolor: "background.default", minHeight: "100vh" }}
    >
      <Container maxWidth="xl">
        <Box sx={{ mb: 4, mt: 4 }}>
          <Typography variant="h4" component="h1" fontWeight={700} gutterBottom>
            Browse Football Fields
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Find and book the perfect field for your game
          </Typography>
        </Box>

        <Grid container spacing={4}>
          {/* Filter Sidebar - Desktop */}
          <Grid
            item
            xs={12}
            md={3}
            lg={2.5}
            sx={{ display: { xs: "none", md: "block" } }}
          >
            <Paper
              elevation={1}
              sx={{
                p: 3,
                borderRadius: 2,
                position: "sticky",
                top: 100,
              }}
            >
              {filterContent}
            </Paper>
          </Grid>

          {/* Main Content */}
          <Grid item xs={12} md={9} lg={9.5}>
            {/* Loading State */}
            {loading && (
              <Box sx={{ display: 'flex', justifyContent: 'center', my: 8 }}>
                <CircularProgress />
              </Box>
            )}
            
            {/* Error State */}
            {error && !loading && (
              <Box sx={{ textAlign: 'center', my: 8 }}>
                <Typography variant="h6" color="error" gutterBottom>
                  {error}
                </Typography>
                <Button 
                  variant="contained" 
                  color="primary" 
                  sx={{ mt: 2 }}
                  onClick={() => window.location.reload()}
                >
                  Try Again
                </Button>
              </Box>
            )}
            
            {/* Search and Sort Bar */}
            {!loading && !error && (
              <>
                <Box
                  sx={{
                    display: "flex",
                    flexDirection: { xs: "column", sm: "row" },
                    justifyContent: "space-between",
                    alignItems: { xs: "flex-start", sm: "center" },
                    mb: 3,
                    gap: 2,
                  }}
                >
                  <TextField
                    placeholder="Search by name or location"
                    variant="outlined"
                    fullWidth
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    sx={{ maxWidth: { sm: "400px" } }}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <SearchIcon />
                        </InputAdornment>
                      ),
                    }}
                  />
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      gap: 2,
                    }}
                  >
                    <Button
                      variant="outlined"
                      color="primary"
                      startIcon={<FilterListIcon />}
                      onClick={() => setMobileFiltersOpen(true)}
                      sx={{ display: { md: "none" } }}
                    >
                      Filters
                    </Button>
                    <FormControl variant="outlined" size="small">
                      <TextField
                        select
                        label="Sort by"
                        value={sortBy}
                        onChange={(e) => setSortBy(e.target.value)}
                        SelectProps={{
                          native: true,
                        }}
                        variant="outlined"
                        size="small"
                      >
                        <option value="recommended">Recommended</option>
                        <option value="price-low">Price: Low to High</option>
                        <option value="price-high">Price: High to Low</option>
                        <option value="rating">Highest Rated</option>
                        <option value="distance">Nearest</option>
                      </TextField>
                    </FormControl>
                  </Box>
                </Box>

                {/* Active Filters */}
                {(selectedTypes.length > 0 ||
                  selectedCapacities.length > 0 ||
                  selectedAmenities.length > 0 ||
                  priceRange[0] > 0 ||
                  priceRange[1] < 100) && (
                  <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1, mb: 3 }}>
                    <Typography
                      variant="body2"
                      sx={{ mr: 1, display: "flex", alignItems: "center" }}
                    >
                      Active Filters:
                    </Typography>

                    {priceRange[0] > 0 || priceRange[1] < 100 ? (
                      <Chip
                        label={`$${priceRange[0]} - $${priceRange[1]}`}
                        onDelete={() => setPriceRange([0, 100])}
                        size="small"
                      />
                    ) : null}

                    {selectedTypes.map((type) => (
                      <Chip
                        key={type}
                        label={type}
                        onDelete={() => handleTypeChange(type)}
                        size="small"
                      />
                    ))}

                    {selectedCapacities.map((capacity) => (
                      <Chip
                        key={capacity}
                        label={capacity}
                        onDelete={() => handleCapacityChange(capacity)}
                        size="small"
                      />
                    ))}

                    {selectedAmenities.map((amenity) => (
                      <Chip
                        key={amenity}
                        label={amenity}
                        onDelete={() => handleAmenityChange(amenity)}
                        size="small"
                      />
                    ))}

                    <Chip
                      label="Clear All"
                      onClick={resetFilters}
                      size="small"
                      color="primary"
                      variant="outlined"
                    />
                  </Box>
                )}

                {/* Results Count */}
                <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                  Showing {sortedFields.length}{" "}
                  {sortedFields.length === 1 ? "field" : "fields"}
                </Typography>

                {/* Fields Grid */}
                {sortedFields.length > 0 ? (
                  <Grid container spacing={3}>
                    {sortedFields.map((field) => (
                      <Grid item xs={12} sm={6} md={6} lg={4} key={field.id}>
                        <Card
                          sx={{
                            height: "100%",
                            display: "flex",
                            flexDirection: "column",
                            borderRadius: 3,
                            overflow: "hidden",
                            transition: "transform 0.3s ease, box-shadow 0.3s ease",
                            "&:hover": {
                              transform: "translateY(-10px)",
                              boxShadow: "0 10px 30px rgba(0, 0, 0, 0.15)",
                            },
                          }}
                        >
                          <CardMedia
                            component="img"
                            height="200"
                            image={field.image}
                            alt={field.name}
                          />
                          <CardContent sx={{ flexGrow: 1 }}>
                            <Box
                              sx={{
                                display: "flex",
                                justifyContent: "space-between",
                                alignItems: "flex-start",
                              }}
                            >
                              <Typography
                                gutterBottom
                                variant="h5"
                                component="h2"
                                sx={{ fontWeight: 600 }}
                              >
                                {field.name}
                              </Typography>
                              <Chip
                                label={field.type}
                                size="small"
                                sx={{
                                  bgcolor:
                                    field.type === "Indoor"
                                      ? "rgba(255, 106, 0, 0.1)"
                                      : "rgba(0, 128, 0, 0.1)",
                                  color:
                                    field.type === "Indoor"
                                      ? "primary.main"
                                      : "success.main",
                                  fontWeight: 500,
                                }}
                              />
                            </Box>

                            <Box
                              sx={{ display: "flex", alignItems: "center", mb: 1 }}
                            >
                              <LocationOnIcon
                                sx={{
                                  color: "text.secondary",
                                  mr: 0.5,
                                  fontSize: 20,
                                }}
                              />
                              <Typography variant="body2" color="text.secondary">
                                {field.location} ({field.distance} miles away)
                              </Typography>
                            </Box>

                            <Box
                              sx={{ display: "flex", alignItems: "center", mb: 1 }}
                            >
                              <AccessTimeIcon
                                sx={{
                                  color: "text.secondary",
                                  mr: 0.5,
                                  fontSize: 20,
                                }}
                              />
                              <Typography variant="body2" color="text.secondary">
                                Available today
                              </Typography>
                            </Box>

                            <Box
                              sx={{ display: "flex", alignItems: "center", mb: 2 }}
                            >
                              <Rating
                                value={field.rating}
                                precision={0.1}
                                readOnly
                                size="small"
                                sx={{ mr: 1 }}
                              />
                              <Typography variant="body2" sx={{ fontWeight: 500 }}>
                                {field.rating}
                              </Typography>
                            </Box>

                            <Box
                              sx={{
                                display: "flex",
                                gap: 1,
                                mb: 2,
                                flexWrap: "wrap",
                              }}
                            >
                              {field.amenities.map((amenity) => (
                                <Chip
                                  key={amenity}
                                  icon={getAmenityIcon(amenity)}
                                  label={amenity}
                                  size="small"
                                  variant="outlined"
                                  sx={{ borderRadius: 1 }}
                                />
                              ))}
                            </Box>

                            <Typography
                              variant="h6"
                              color="primary.main"
                              sx={{ fontWeight: 600, mb: 2 }}
                            >
                              ${field.price}/hour
                            </Typography>
                            <Box
                              sx={{
                                display: "flex",
                                justifyContent: "space-between",
                                gap: 1,
                              }}
                            >
                              <Button
                                component={Link}
                                to={`/fields/${field.id}`}
                                variant="outlined"
                                color="primary"
                                fullWidth
                              >
                                Details
                              </Button>
                              <Button
                                component={Link}
                                to={`/fields/${field.id}/booking`}
                                variant="contained"
                                color="primary"
                                fullWidth
                              >
                                Book Now
                              </Button>
                            </Box>
                          </CardContent>
                        </Card>
                      </Grid>
                    ))}
                  </Grid>
                ) : (
                  <Box sx={{ textAlign: "center", py: 8 }}>
                    <Typography variant="h5" gutterBottom>
                      No fields match your criteria
                    </Typography>
                    <Typography
                      variant="body1"
                      color="text.secondary"
                      sx={{ mb: 3 }}
                    >
                      Try adjusting your filters or search query
                    </Typography>
                    <Button
                      variant="contained"
                      color="primary"
                      onClick={resetFilters}
                    >
                      Reset Filters
                    </Button>
                  </Box>
                )}
              </>
            )}
          </Grid>
        </Grid>
      </Container>

      {/* Mobile Filters Drawer */}
      <Drawer
        anchor="left"
        open={mobileFiltersOpen}
        onClose={() => setMobileFiltersOpen(false)}
        sx={{
          "& .MuiDrawer-paper": {
            width: "85%",
            maxWidth: "350px",
            boxSizing: "border-box",
          },
        }}
      >
        {filterContent}
      </Drawer>
    </Box>
  );
};

export default BrowseFields;
